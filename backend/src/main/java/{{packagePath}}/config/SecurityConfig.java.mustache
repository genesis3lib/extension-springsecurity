package {{{javaPackageFull}}}.config;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;

import java.util.Arrays;
import java.util.List;

/**
 * Security configuration for {{{projectName}}}
 *
 * Configures:
 * - CORS (Cross-Origin Resource Sharing)
 * - Public vs protected endpoints
 * - JWT-based authentication
 * - Stateless session management
 */
@Configuration
@EnableWebSecurity
public class SecurityConfig {

    @Value("${app.security.cors.origins}")
    private String corsOrigins;

    @Value("${app.security.cors.allowed-methods:GET,POST,PUT,DELETE,PATCH,OPTIONS}")
    private String allowedMethods;

    @Value("${app.security.cors.allowed-headers:*}")
    private String allowedHeaders;

    @Value("${app.security.cors.allow-credentials:true}")
    private boolean allowCredentials;

    @Value("${app.security.cors.max-age:3600}")
    private long maxAge;

    @Value("${app.security.public-uris}")
    private String publicUris;

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        // Parse public URIs
        String[] publicUriPatterns = publicUris.split(",");

        http
            .cors(cors -> cors.configurationSource(corsConfigurationSource()))
            .csrf(csrf -> csrf.disable())
            .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
            .authorizeHttpRequests(auth -> {
                // Allow public endpoints
                for (String pattern : publicUriPatterns) {
                    auth.requestMatchers(pattern.trim()).permitAll();
                }
                // All other requests require authentication
                auth.anyRequest().authenticated();
            });

        return http.build();
    }

    @Bean
    public CorsConfigurationSource corsConfigurationSource() {
        CorsConfiguration configuration = new CorsConfiguration();

        // Parse CORS origins
        List<String> originsList = Arrays.asList(corsOrigins.split(","));
        configuration.setAllowedOriginPatterns(originsList);

        // Parse allowed methods
        List<String> methodsList = Arrays.asList(allowedMethods.split(","));
        configuration.setAllowedMethods(methodsList);

        // Parse allowed headers
        if ("*".equals(allowedHeaders.trim())) {
            configuration.addAllowedHeader("*");
        } else {
            List<String> headersList = Arrays.asList(allowedHeaders.split(","));
            configuration.setAllowedHeaders(headersList);
        }

        configuration.setAllowCredentials(allowCredentials);
        configuration.setMaxAge(maxAge);

        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        source.registerCorsConfiguration("/**", configuration);

        return source;
    }
}
